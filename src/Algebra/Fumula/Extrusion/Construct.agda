module Algebra.Fumula.Extrusion.Construct where
open import Data.Empty.Polymorphic
open import Data.Unit.Polymorphic
open import Data.Product using (_√ó_; _,_)
open import Relation.Binary.Core using (Rel)
open import Relation.Binary.Structures using (IsEquivalence)
open import Relation.Binary.Definitions using (Reflexive; Symmetric; Transitive)
open import Data.Product.Relation.Binary.Pointwise.NonDependent using (Pointwise; √ó-isEquivalence)
open import Algebra.Fumula.Bundles
open import Algebra.Fumula.Extrusion.Core
open import Algebra.Fumula.Extrusion.Definitions
open import Algebra.Fumula.Extrusion.Structures
open import Algebra.Fumula.Extrusion.Bundles

module Terminal {x x‚Ñì} where

  module ùïÜne where

    Carrier : Set x
    Carrier = ‚ä§

    infix  4 _‚âà_
    _‚âà_ : Rel Carrier x‚Ñì
    _ ‚âà _ = ‚ä§

  open ùïÜne

  isEquivalence : IsEquivalence _‚âà_
  isEquivalence = record { ùïÜne }

  module _ {f f‚Ñì} (F : AlmostFumula f f‚Ñì) where

    leftAlmostFumulaExtrusion : LeftAlmostFumulaExtrusion F x x‚Ñì
    leftAlmostFumulaExtrusion = record { ùïÜne }
    open LeftAlmostFumulaExtrusion leftAlmostFumulaExtrusion public
      using (isLeftAlmostFumulaExtrusion)

    rightAlmostFumulaExtrusion : RightAlmostFumulaExtrusion F x x‚Ñì
    rightAlmostFumulaExtrusion = record { ùïÜne }
    open RightAlmostFumulaExtrusion rightAlmostFumulaExtrusion public
      using (isRightAlmostFumulaExtrusion)

  module _ {f‚Çó f·µ£ f‚Ñì‚Çó f‚Ñì·µ£} (F‚Çó : AlmostFumula f‚Çó f‚Ñì‚Çó) (F·µ£ : AlmostFumula f·µ£ f‚Ñì·µ£) where

    doubleAlmostFumulaExtrusion : DoubleAlmostFumulaExtrusion F‚Çó F·µ£ x x‚Ñì
    doubleAlmostFumulaExtrusion = record { ùïÜne }
    open DoubleAlmostFumulaExtrusion doubleAlmostFumulaExtrusion public
      using (isDoubleAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleAlmostFumula f f‚Ñì) where

    almostFumulaExtrusion : AlmostFumulaExtrusion F x x‚Ñì
    almostFumulaExtrusion = record { ùïÜne }
    open AlmostFumulaExtrusion almostFumulaExtrusion public
      using (isAlmostFumulaExtrusion)

    reversibleAlmostFumulaExtrusion : ReversibleAlmostFumulaExtrusion F x x‚Ñì
    reversibleAlmostFumulaExtrusion = record { ùïÜne }
    open ReversibleAlmostFumulaExtrusion reversibleAlmostFumulaExtrusion public
      using (isReversibleAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : Fumula f f‚Ñì) where

    leftFumulaExtrusion : LeftFumulaExtrusion F x x‚Ñì
    leftFumulaExtrusion = record { ùïÜne }
    open LeftFumulaExtrusion leftFumulaExtrusion public
      using (isLeftFumulaExtrusion)

    rightFumulaExtrusion : RightFumulaExtrusion F x x‚Ñì
    rightFumulaExtrusion = record { ùïÜne }
    open RightFumulaExtrusion rightFumulaExtrusion public
      using (isRightFumulaExtrusion)

  module _ {f‚Çó f·µ£ f‚Ñì‚Çó f‚Ñì·µ£} (F‚Çó : Fumula f‚Çó f‚Ñì‚Çó) (F·µ£ : Fumula f·µ£ f‚Ñì·µ£) where

    doubleFumulaExtrusion : DoubleFumulaExtrusion F‚Çó F·µ£ x x‚Ñì
    doubleFumulaExtrusion = record { ùïÜne }
    open DoubleFumulaExtrusion doubleFumulaExtrusion public
      using (isDoubleFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleFumula f f‚Ñì) where

    fumulaExtrusion : FumulaExtrusion F x x‚Ñì
    fumulaExtrusion = record { ùïÜne }
    open FumulaExtrusion fumulaExtrusion public
      using (isFumulaExtrusion)

    reversibleFumulaExtrusion : ReversibleFumulaExtrusion F x x‚Ñì
    reversibleFumulaExtrusion = record { ùïÜne }
    open ReversibleFumulaExtrusion reversibleFumulaExtrusion public
      using (isReversibleFumulaExtrusion)

module Initial {x x‚Ñì} where

  module ‚Ñ§ero where

    Carrier : Set x
    Carrier = ‚ä•

    infix  4 _‚âà_
    _‚âà_ : Rel Carrier x‚Ñì
    _‚âà_ ()

    refl : Reflexive _‚âà_
    refl {x = ()}

    sym : Symmetric _‚âà_
    sym {x = ()}

    trans : Transitive _‚âà_
    trans {i = ()}

    module _ {f} {F : Set f} where

      infix 7 ‚ù≤_‚ù≥‚§ô_‚§ö_
      ‚ù≤_‚ù≥‚§ô_‚§ö_ : Op‚ÇÉ‚Çó F Carrier
      ‚ù≤_‚ù≥‚§ô_‚§ö_ _ ()

      module _ {f‚Ñì} (_‚âà·∂†_ : Rel F f‚Ñì) where
        private
          module L = LeftDefs ‚ù≤_‚ù≥‚§ô_‚§ö_ _‚âà_

        ‚ù≤‚ù≥‚§ô‚§ö-cong : L.Congruent‚ÇÉ _‚âà·∂†_
        ‚ù≤‚ù≥‚§ô‚§ö-cong {u = ()}

      infix 7 _‚§ô_‚§ö‚ù≤_‚ù≥
      _‚§ô_‚§ö‚ù≤_‚ù≥ : Op‚ÇÉ·µ£ F Carrier
      _‚§ô_‚§ö‚ù≤_‚ù≥ ()

      module _ {f‚Ñì} (_‚âà·∂†_ : Rel F f‚Ñì) where
        private
          module R = RightDefs _‚§ô_‚§ö‚ù≤_‚ù≥ _‚âà_
          
        ‚§ô‚§ö‚ù≤‚ù≥-cong :  R.Congruent‚ÇÉ _‚âà·∂†_
        ‚§ô‚§ö‚ù≤‚ù≥-cong {x = ()}

  open ‚Ñ§ero

  isEquivalence : IsEquivalence _‚âà_
  isEquivalence = record { ‚Ñ§ero }

  module _ {f f‚Ñì} (F : AlmostFumula f f‚Ñì) where

    leftAlmostFumulaExtrusion : LeftAlmostFumulaExtrusion F x x‚Ñì
    leftAlmostFumulaExtrusion = record
      { Carrier = Carrier
      ; _‚âà_ = _‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = ‚ù≤_‚ù≥‚§ô_‚§ö_
      ; isLeftAlmostFumulaExtrusion = record
        { isEquivalence = isEquivalence
        ; ‚ù≤‚ù≥‚§ô‚§ö-cong = ‚ù≤‚ù≥‚§ô‚§ö-cong (AlmostFumula._‚âà_ F)
        ; ‚ù≤‚ù≥‚§ô‚§ö-double-exchange = Œª _ ()
        }
      }
    open LeftAlmostFumulaExtrusion leftAlmostFumulaExtrusion public
      using (isLeftAlmostFumulaExtrusion)

    rightAlmostFumulaExtrusion : RightAlmostFumulaExtrusion F x x‚Ñì
    rightAlmostFumulaExtrusion = record
      { Carrier = Carrier
      ; _‚âà_ = _‚âà_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = _‚§ô_‚§ö‚ù≤_‚ù≥
      ; isRightAlmostFumulaExtrusion = record
        { isEquivalence = isEquivalence
        ; ‚§ô‚§ö‚ù≤‚ù≥-cong = ‚§ô‚§ö‚ù≤‚ù≥-cong (AlmostFumula._‚âà_ F)
        ; ‚§ô‚§ö‚ù≤‚ù≥-double-exchange = Œª ()
        }
      }
    open RightAlmostFumulaExtrusion rightAlmostFumulaExtrusion public
      using (isRightAlmostFumulaExtrusion)

  module _ {f‚Çó f·µ£ f‚Ñì‚Çó f‚Ñì·µ£} (F‚Çó : AlmostFumula f‚Çó f‚Ñì‚Çó) (F·µ£ : AlmostFumula f·µ£ f‚Ñì·µ£) where

    doubleAlmostFumulaExtrusion : DoubleAlmostFumulaExtrusion F‚Çó F·µ£ x x‚Ñì
    doubleAlmostFumulaExtrusion = record
      { Carrier = Carrier
      ; _‚âà_ = _‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = ‚ù≤_‚ù≥‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = _‚§ô_‚§ö‚ù≤_‚ù≥
      ; isDoubleAlmostFumulaExtrusion = record
        { isEquivalence = isEquivalence
        ; ‚ù≤‚ù≥‚§ô‚§ö-cong = ‚ù≤‚ù≥‚§ô‚§ö-cong (AlmostFumula._‚âà_ F‚Çó)
        ; ‚ù≤‚ù≥‚§ô‚§ö-double-exchange = Œª _ ()
        ; ‚§ô‚§ö‚ù≤‚ù≥-cong = ‚§ô‚§ö‚ù≤‚ù≥-cong (AlmostFumula._‚âà_ F·µ£)
        ; ‚§ô‚§ö‚ù≤‚ù≥-double-exchange = Œª ()
        }
      }
    open DoubleAlmostFumulaExtrusion doubleAlmostFumulaExtrusion public
      using (isDoubleAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleAlmostFumula f f‚Ñì) where

    almostFumulaExtrusion : AlmostFumulaExtrusion F x x‚Ñì
    almostFumulaExtrusion = record
      { Carrier = Carrier
      ; _‚âà_ = _‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = ‚ù≤_‚ù≥‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = _‚§ô_‚§ö‚ù≤_‚ù≥
      ; isAlmostFumulaExtrusion = record
        { isDoubleAlmostFumulaExtrusion =
          let F‚Ä≤ = ReversibleAlmostFumula.almostFumula F
          in isDoubleAlmostFumulaExtrusion F‚Ä≤ F‚Ä≤
        }
      }
    open AlmostFumulaExtrusion almostFumulaExtrusion public
      using (isAlmostFumulaExtrusion)

    reversibleAlmostFumulaExtrusion : ReversibleAlmostFumulaExtrusion F x x‚Ñì
    reversibleAlmostFumulaExtrusion = record
      { Carrier = Carrier
      ; _‚âà_ = _‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = ‚ù≤_‚ù≥‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = _‚§ô_‚§ö‚ù≤_‚ù≥
      ; isReversibleAlmostFumulaExtrusion = record {
        isAlmostFumulaExtrusion = isAlmostFumulaExtrusion
        ; outer-commute = Œª ()
        }
      }
    open ReversibleAlmostFumulaExtrusion reversibleAlmostFumulaExtrusion public
      using (isReversibleAlmostFumulaExtrusion)

  open Terminal {x} {x‚Ñì} public
    hiding (module ùïÜne; isEquivalence; leftAlmostFumulaExtrusion; rightAlmostFumulaExtrusion;
            doubleAlmostFumulaExtrusion; almostFumulaExtrusion; reversibleAlmostFumulaExtrusion)

module DirectProduct {x x‚Ñì} where

  module _ {f f‚Ñì} (F : AlmostFumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : LeftAlmostFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = LeftAlmostFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = LeftAlmostFumulaExtrusion X‚ÇÇ

    leftAlmostFumulaExtrusion : LeftAlmostFumulaExtrusion F x x‚Ñì
    leftAlmostFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; isLeftAlmostFumulaExtrusion = record
        { isEquivalence = √ó-isEquivalence X‚ÇÅ.isEquivalence X‚ÇÇ.isEquivalence
        ; ‚ù≤‚ù≥‚§ô‚§ö-cong = Œª s‚âà (z‚ÇÅ‚âà , z‚ÇÇ‚âà) (x‚ÇÅ‚âà , x‚ÇÇ‚âà) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-cong s‚âà z‚ÇÅ‚âà x‚ÇÅ‚âà , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-cong s‚âà z‚ÇÇ‚âà x‚ÇÇ‚âà
        ; ‚ù≤‚ù≥‚§ô‚§ö-double-exchange = Œª v (w‚ÇÅ , w‚ÇÇ) x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí
          X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-double-exchange v w‚ÇÅ x y‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-double-exchange v w‚ÇÇ x y‚ÇÇ z‚ÇÇ
        }
      }
    open LeftAlmostFumulaExtrusion leftAlmostFumulaExtrusion public
      using (isLeftAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : AlmostFumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : RightAlmostFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = RightAlmostFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = RightAlmostFumulaExtrusion X‚ÇÇ

    rightAlmostFumulaExtrusion : RightAlmostFumulaExtrusion F x x‚Ñì
    rightAlmostFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; isRightAlmostFumulaExtrusion = record
        { isEquivalence = √ó-isEquivalence X‚ÇÅ.isEquivalence X‚ÇÇ.isEquivalence
        ; ‚§ô‚§ö‚ù≤‚ù≥-cong = Œª (x‚ÇÅ‚âà , x‚ÇÇ‚âà) (z‚ÇÅ‚âà , z‚ÇÇ‚âà) s‚âà ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-cong x‚ÇÅ‚âà z‚ÇÅ‚âà s‚âà , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-cong x‚ÇÇ‚âà z‚ÇÇ‚âà s‚âà
        ; ‚§ô‚§ö‚ù≤‚ù≥-double-exchange = Œª (v‚ÇÅ , v‚ÇÇ) w (x‚ÇÅ , x‚ÇÇ) y (z‚ÇÅ , z‚ÇÇ) ‚Üí
          X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-double-exchange v‚ÇÅ w x‚ÇÅ y z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-double-exchange v‚ÇÇ w x‚ÇÇ y z‚ÇÇ
        }
      }
    open RightAlmostFumulaExtrusion rightAlmostFumulaExtrusion public
      using (isRightAlmostFumulaExtrusion)

  module _ {f‚Çó f·µ£ f‚Ñì‚Çó f‚Ñì·µ£} (F‚Çó : AlmostFumula f‚Çó f‚Ñì‚Çó) (F·µ£ : AlmostFumula f·µ£ f‚Ñì·µ£) (X‚ÇÅ X‚ÇÇ : DoubleAlmostFumulaExtrusion F‚Çó F·µ£ x x‚Ñì) where
    private
      module X‚ÇÅ = DoubleAlmostFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = DoubleAlmostFumulaExtrusion X‚ÇÇ

    doubleAlmostFumulaExtrusion : DoubleAlmostFumulaExtrusion F‚Çó F·µ£ x x‚Ñì
    doubleAlmostFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; isDoubleAlmostFumulaExtrusion = record
        { isEquivalence = √ó-isEquivalence X‚ÇÅ.isEquivalence X‚ÇÇ.isEquivalence
        ; ‚ù≤‚ù≥‚§ô‚§ö-cong = Œª s‚âà (z‚ÇÅ‚âà , z‚ÇÇ‚âà) (x‚ÇÅ‚âà , x‚ÇÇ‚âà) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-cong s‚âà z‚ÇÅ‚âà x‚ÇÅ‚âà , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-cong s‚âà z‚ÇÇ‚âà x‚ÇÇ‚âà
        ; ‚ù≤‚ù≥‚§ô‚§ö-double-exchange = Œª v (w‚ÇÅ , w‚ÇÇ) x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí
          X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-double-exchange v w‚ÇÅ x y‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-double-exchange v w‚ÇÇ x y‚ÇÇ z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-cong = Œª (x‚ÇÅ‚âà , x‚ÇÇ‚âà) (z‚ÇÅ‚âà , z‚ÇÇ‚âà) s‚âà ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-cong x‚ÇÅ‚âà z‚ÇÅ‚âà s‚âà , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-cong x‚ÇÇ‚âà z‚ÇÇ‚âà s‚âà
        ; ‚§ô‚§ö‚ù≤‚ù≥-double-exchange = Œª (v‚ÇÅ , v‚ÇÇ) w (x‚ÇÅ , x‚ÇÇ) y (z‚ÇÅ , z‚ÇÇ) ‚Üí
          X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-double-exchange v‚ÇÅ w x‚ÇÅ y z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-double-exchange v‚ÇÇ w x‚ÇÇ y z‚ÇÇ
        }
      }
    open DoubleAlmostFumulaExtrusion doubleAlmostFumulaExtrusion public
      using (isDoubleAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleAlmostFumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : AlmostFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = AlmostFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = AlmostFumulaExtrusion X‚ÇÇ

    almostFumulaExtrusion : AlmostFumulaExtrusion F x x‚Ñì
    almostFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; isAlmostFumulaExtrusion = record
        { isDoubleAlmostFumulaExtrusion = 
          let F‚Ä≤ = ReversibleAlmostFumula.almostFumula F
          in isDoubleAlmostFumulaExtrusion F‚Ä≤ F‚Ä≤ X‚ÇÅ.doubleAlmostFumulaExtrusion X‚ÇÇ.doubleAlmostFumulaExtrusion
        }
      }
    open AlmostFumulaExtrusion almostFumulaExtrusion public
      using (isAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleAlmostFumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : ReversibleAlmostFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = ReversibleAlmostFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = ReversibleAlmostFumulaExtrusion X‚ÇÇ

    reversibleAlmostFumulaExtrusion : ReversibleAlmostFumulaExtrusion F x x‚Ñì
    reversibleAlmostFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; isReversibleAlmostFumulaExtrusion = record
        { isAlmostFumulaExtrusion = isAlmostFumulaExtrusion F X‚ÇÅ.almostFumulaExtrusion X‚ÇÇ.almostFumulaExtrusion
        ; outer-commute = Œª (y‚ÇÅ , y‚ÇÇ) x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.outer-commute y‚ÇÅ x z‚ÇÅ , X‚ÇÇ.outer-commute y‚ÇÇ x z‚ÇÇ
        }
      }
    open ReversibleAlmostFumulaExtrusion reversibleAlmostFumulaExtrusion public
      using (isReversibleAlmostFumulaExtrusion)

  module _ {f f‚Ñì} (F : Fumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : LeftFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = LeftFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = LeftFumulaExtrusion X‚ÇÇ

    leftFumulaExtrusion : LeftFumulaExtrusion F x x‚Ñì
    leftFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; ‚óÜ = X‚ÇÅ.‚óÜ , X‚ÇÇ.‚óÜ
      ; isLeftFumulaExtrusion = record
        { ‚ù≤‚ù≥‚§ô‚§ö-isLeftAlmostFumulaExtrusion =
          isLeftAlmostFumulaExtrusion (Fumula.almostFumula F) X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-leftAlmostFumulaExtrusion X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-leftAlmostFumulaExtrusion
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ = Œª (x‚ÇÅ , x‚ÇÇ) (y‚ÇÅ , y‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ x‚ÇÅ y‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ x‚ÇÇ y‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° = Œª v w x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° v w x y‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° v w x y‚ÇÇ z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ = Œª (v‚ÇÅ , v‚ÇÇ) w x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ v‚ÇÅ w x y‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ v‚ÇÇ w x y‚ÇÇ z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ = Œª (x‚ÇÅ , x‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ x‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ x‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° x‚ÇÇ z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ = Œª x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ x z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ x z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate = Œª w x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate w x y‚ÇÅ z‚ÇÅ) , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate w x y‚ÇÇ z‚ÇÇ
        }
      }
    open LeftFumulaExtrusion leftFumulaExtrusion public
      using (isLeftFumulaExtrusion)

  module _ {f f‚Ñì} (F : Fumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : RightFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = RightFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = RightFumulaExtrusion X‚ÇÇ

    rightFumulaExtrusion : RightFumulaExtrusion F x x‚Ñì
    rightFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; ‚óÜ = X‚ÇÅ.‚óÜ , X‚ÇÇ.‚óÜ
      ; isRightFumulaExtrusion = record
        { ‚§ô‚§ö‚ù≤‚ù≥-isRightAlmostFumulaExtrusion =
          isRightAlmostFumulaExtrusion (Fumula.almostFumula F) X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-rightAlmostFumulaExtrusion X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-rightAlmostFumulaExtrusion
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° = Œª (x‚ÇÅ , x‚ÇÇ) (y‚ÇÅ , y‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° x‚ÇÅ y‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° x‚ÇÇ y‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° = Œª (v‚ÇÅ , v‚ÇÇ) (w‚ÇÅ , w‚ÇÇ) x y (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° v‚ÇÅ w‚ÇÅ x y z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° v‚ÇÇ w‚ÇÇ x y z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ = Œª (v‚ÇÅ , v‚ÇÇ) (w‚ÇÅ , w‚ÇÇ) x y z ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ v‚ÇÅ w‚ÇÅ x y z , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ v‚ÇÇ w‚ÇÇ x y z
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° = Œª (x‚ÇÅ , x‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° x‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° x‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° = Œª x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° x z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° x z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ x‚ÇÇ z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate = Œª (w‚ÇÅ , w‚ÇÇ) x y (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate w‚ÇÅ x y z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate w‚ÇÇ x y z‚ÇÇ
        }
      }
    open RightFumulaExtrusion rightFumulaExtrusion public
      using (isRightFumulaExtrusion)

  module _ {f‚Çó f·µ£ f‚Ñì‚Çó f‚Ñì·µ£} (F‚Çó : Fumula f‚Çó f‚Ñì‚Çó) (F·µ£ : Fumula f·µ£ f‚Ñì·µ£) (X‚ÇÅ X‚ÇÇ : DoubleFumulaExtrusion F‚Çó F·µ£ x x‚Ñì) where
    private
      module X‚ÇÅ = DoubleFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = DoubleFumulaExtrusion X‚ÇÇ

    doubleFumulaExtrusion : DoubleFumulaExtrusion F‚Çó F·µ£ x x‚Ñì
    doubleFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; ‚óÜ = X‚ÇÅ.‚óÜ , X‚ÇÇ.‚óÜ
      ; isDoubleFumulaExtrusion = record
        { isDoubleAlmostFumulaExtrusion =
          isDoubleAlmostFumulaExtrusion (Fumula.almostFumula F‚Çó) (Fumula.almostFumula F·µ£) X‚ÇÅ.doubleAlmostFumulaExtrusion X‚ÇÇ.doubleAlmostFumulaExtrusion
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ = Œª (x‚ÇÅ , x‚ÇÇ) (y‚ÇÅ , y‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ x‚ÇÅ y‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ x‚ÇÇ y‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° = Œª v w x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° v w x y‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° v w x y‚ÇÇ z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ = Œª (v‚ÇÅ , v‚ÇÇ) w x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ v‚ÇÅ w x y‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ v‚ÇÇ w x y‚ÇÇ z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ = Œª (x‚ÇÅ , x‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ x‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ x‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° x‚ÇÇ z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ = Œª x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ x z‚ÇÅ , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ x z‚ÇÇ
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate = Œª w x (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate w x y‚ÇÅ z‚ÇÅ) , X‚ÇÇ.‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate w x y‚ÇÇ z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° = Œª (x‚ÇÅ , x‚ÇÇ) (y‚ÇÅ , y‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° x‚ÇÅ y‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° x‚ÇÇ y‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° = Œª (v‚ÇÅ , v‚ÇÇ) (w‚ÇÅ , w‚ÇÇ) x y (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° v‚ÇÅ w‚ÇÅ x y z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° v‚ÇÇ w‚ÇÇ x y z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ = Œª (v‚ÇÅ , v‚ÇÇ) (w‚ÇÅ , w‚ÇÇ) x y z ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ v‚ÇÅ w‚ÇÅ x y z , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ v‚ÇÇ w‚ÇÇ x y z
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° = Œª (x‚ÇÅ , x‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° x‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° x‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° = Œª x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° x z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° x z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ x‚ÇÇ z‚ÇÇ
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate = Œª (w‚ÇÅ , w‚ÇÇ) x y (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate w‚ÇÅ x y z‚ÇÅ , X‚ÇÇ.‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate w‚ÇÇ x y z‚ÇÇ
        ; ‚óÜ-outer-associate = Œª w (x‚ÇÅ , x‚ÇÇ) y (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚óÜ-outer-associate w x‚ÇÅ y z‚ÇÅ , X‚ÇÇ.‚óÜ-outer-associate w x‚ÇÇ y z‚ÇÇ
        }
      }
    open DoubleFumulaExtrusion doubleFumulaExtrusion public
      using (isDoubleFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleFumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : FumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = FumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = FumulaExtrusion X‚ÇÇ

    fumulaExtrusion : FumulaExtrusion F x x‚Ñì
    fumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; ‚óÜ = X‚ÇÅ.‚óÜ , X‚ÇÇ.‚óÜ
      ; isFumulaExtrusion = record
        { isDoubleFumulaExtrusion =
          let F‚Ä≤ = ReversibleFumula.fumula F
          in isDoubleFumulaExtrusion F‚Ä≤ F‚Ä≤ X‚ÇÅ.doubleFumulaExtrusion X‚ÇÇ.doubleFumulaExtrusion
        ; ‚ñ†·∂†-outer-commute = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚ñ†·∂†-outer-commute x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚ñ†·∂†-outer-commute x‚ÇÇ z‚ÇÇ
        ; ‚óÜ·∂†-outer-commute = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚óÜ·∂†-outer-commute x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚óÜ·∂†-outer-commute x‚ÇÇ z‚ÇÇ
        ; ‚óè·∂†-outer-commute = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚óè·∂†-outer-commute x‚ÇÅ z‚ÇÅ , X‚ÇÇ.‚óè·∂†-outer-commute x‚ÇÇ z‚ÇÇ
        ; ‚óÜ-outer-commute = Œª x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.‚óÜ-outer-commute x z‚ÇÅ , X‚ÇÇ.‚óÜ-outer-commute x z‚ÇÇ
        }
      }
    open FumulaExtrusion fumulaExtrusion public
      using (isFumulaExtrusion)

  module _ {f f‚Ñì} (F : ReversibleFumula f f‚Ñì) (X‚ÇÅ X‚ÇÇ : ReversibleFumulaExtrusion F x x‚Ñì) where
    private
      module X‚ÇÅ = ReversibleFumulaExtrusion X‚ÇÅ
      module X‚ÇÇ = ReversibleFumulaExtrusion X‚ÇÇ

    reversibleFumulaExtrusion : ReversibleFumulaExtrusion F x x‚Ñì
    reversibleFumulaExtrusion = record
      { Carrier = X‚ÇÅ.Carrier √ó X‚ÇÇ.Carrier
      ; _‚âà_ = Pointwise X‚ÇÅ._‚âà_ X‚ÇÇ._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = Œª s (z‚ÇÅ , z‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (X‚ÇÅ.‚ù≤ s ‚ù≥‚§ô z‚ÇÅ ‚§ö x‚ÇÅ) , (X‚ÇÇ.‚ù≤ s ‚ù≥‚§ô z‚ÇÇ ‚§ö x‚ÇÇ)
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = Œª (x‚ÇÅ , x‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) s ‚Üí (x‚ÇÅ X‚ÇÅ.‚§ô z‚ÇÅ ‚§ö‚ù≤ s ‚ù≥) , (x‚ÇÇ X‚ÇÇ.‚§ô z‚ÇÇ ‚§ö‚ù≤ s ‚ù≥)
      ; ‚óÜ = X‚ÇÅ.‚óÜ , X‚ÇÇ.‚óÜ
      ; isReversibleFumulaExtrusion = record
        { isFumulaExtrusion = isFumulaExtrusion F X‚ÇÅ.fumulaExtrusion X‚ÇÇ.fumulaExtrusion
        ; outer-commute = Œª (y‚ÇÅ , y‚ÇÇ) x (z‚ÇÅ , z‚ÇÇ) ‚Üí X‚ÇÅ.outer-commute y‚ÇÅ x z‚ÇÅ , X‚ÇÇ.outer-commute y‚ÇÇ x z‚ÇÇ
        }
      }
    open ReversibleFumulaExtrusion reversibleFumulaExtrusion public
      using (isReversibleFumulaExtrusion)

module TensorUnit {f f‚Ñì} where

  module _ (F : AlmostFumula f f‚Ñì) where
    private
      module F = AlmostFumula F

    doubleAlmostFumulaExtrusion : DoubleAlmostFumulaExtrusion F F f f‚Ñì
    doubleAlmostFumulaExtrusion = record
      { Carrier = F.Carrier
      ; _‚âà_ = F._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = F._‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = F._‚§ô_‚§ö_
      ; isDoubleAlmostFumulaExtrusion = record
        { isEquivalence = F.isEquivalence
        ; ‚ù≤‚ù≥‚§ô‚§ö-cong = F.‚§ô‚§ö-cong
        ; ‚ù≤‚ù≥‚§ô‚§ö-double-exchange = F.double-exchange
        ; ‚§ô‚§ö‚ù≤‚ù≥-cong = F.‚§ô‚§ö-cong
        ; ‚§ô‚§ö‚ù≤‚ù≥-double-exchange = F.double-exchange
        }
      }
    open DoubleAlmostFumulaExtrusion doubleAlmostFumulaExtrusion public
      using (isDoubleAlmostFumulaExtrusion)
      renaming (‚ù≤‚ù≥‚§ô‚§ö-leftAlmostFumulaExtrusion to leftAlmostFumulaExtrusion;
                ‚ù≤‚ù≥‚§ô‚§ö-isLeftAlmostFumulaExtrusion to isLeftAlmostFumulaExtrusion;
                ‚§ô‚§ö‚ù≤‚ù≥-rightAlmostFumulaExtrusion to rightAlmostFumulaExtrusion;
                ‚§ô‚§ö‚ù≤‚ù≥-isRightAlmostFumulaExtrusion to isRightAlmostFumulaExtrusion)

  module _ (F : ReversibleAlmostFumula f f‚Ñì) where
    private
      module F = ReversibleAlmostFumula F

    reversibleAlmostFumulaExtrusion : ReversibleAlmostFumulaExtrusion F f f‚Ñì
    reversibleAlmostFumulaExtrusion = record
      { Carrier = F.Carrier
      ; _‚âà_ = F._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = F._‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = F._‚§ô_‚§ö_
      ; isReversibleAlmostFumulaExtrusion = record
        { isAlmostFumulaExtrusion = record
          { isDoubleAlmostFumulaExtrusion = isDoubleAlmostFumulaExtrusion F.almostFumula
          }
        ; outer-commute = F.outer-commute
        }
      }
    open ReversibleAlmostFumulaExtrusion reversibleAlmostFumulaExtrusion public
      using (almostFumulaExtrusion; isAlmostFumulaExtrusion; isReversibleAlmostFumulaExtrusion)

  module _ (F : Fumula f f‚Ñì) where
    private
      module F = Fumula F

    doubleFumulaExtrusion : DoubleFumulaExtrusion F F f f‚Ñì
    doubleFumulaExtrusion = record
      { Carrier = F.Carrier
      ; _‚âà_ = F._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = F._‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = F._‚§ô_‚§ö_
      ; ‚óÜ = F.‚óÜ
      ; isDoubleFumulaExtrusion = record
        { isDoubleAlmostFumulaExtrusion = isDoubleAlmostFumulaExtrusion F.almostFumula
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óè·∂†-inner-commute ≥ = F.‚óè-inner-commute ≥
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-pulloutÀ° = F.‚óÜ-pulloutÀ°
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-pullout ≥ = F.‚óÜ-pullout ≥
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚ñ†·∂†-collapse-dup ≥ = F.‚ñ†-collapse-dupÀ°
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-collapse-middleÀ° = F.‚óÜ-collapse-middleÀ°
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ-collapse-middle ≥ = F.‚óÜ-collapse-middle ≥
        ; ‚ù≤‚ù≥‚§ô‚§ö-‚óÜ·∂†-‚óÜ-outer-associate = F.‚óÜ-outer-associate
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óè·∂†-inner-commuteÀ° = F.‚óè-inner-commuteÀ°
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-pulloutÀ° = F.‚óÜ-pulloutÀ°
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-pullout ≥ = F.‚óÜ-pullout ≥
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚ñ†·∂†-collapse-dupÀ° = F.‚ñ†-collapse-dup ≥
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ-collapse-middleÀ° = F.‚óÜ-collapse-middleÀ°
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-collapse-middle ≥ = F.‚óÜ-collapse-middle ≥
        ; ‚§ô‚§ö‚ù≤‚ù≥-‚óÜ·∂†-‚óÜ-outer-associate = F.‚óÜ-outer-associate
        ; ‚óÜ-outer-associate = F.‚óÜ-outer-associate
        }
      }
    open DoubleFumulaExtrusion doubleFumulaExtrusion public
      using (isDoubleFumulaExtrusion)
      renaming (‚ù≤‚ù≥‚§ô‚§ö-leftFumulaExtrusion to leftFumulaExtrusion;
                ‚ù≤‚ù≥‚§ô‚§ö-isLeftFumulaExtrusion to isLeftFumulaExtrusion;
                ‚§ô‚§ö‚ù≤‚ù≥-rightFumulaExtrusion to rightFumulaExtrusion;
                ‚§ô‚§ö‚ù≤‚ù≥-isRightFumulaExtrusion to isRightFumulaExtrusion)

  module _ (F : ReversibleFumula f f‚Ñì) where
    private
      module F = ReversibleFumula F

    reversibleFumulaExtrusion : ReversibleFumulaExtrusion F f f‚Ñì
    reversibleFumulaExtrusion = record
      { Carrier = F.Carrier
      ; _‚âà_ = F._‚âà_
      ; ‚ù≤_‚ù≥‚§ô_‚§ö_ = F._‚§ô_‚§ö_
      ; _‚§ô_‚§ö‚ù≤_‚ù≥ = F._‚§ô_‚§ö_
      ; ‚óÜ = F.‚óÜ
      ; isReversibleFumulaExtrusion = record
        { isFumulaExtrusion = record
          { isDoubleFumulaExtrusion = isDoubleFumulaExtrusion F.fumula
          ; ‚ñ†·∂†-outer-commute = F.‚ñ†-outer-commute
          ; ‚óÜ·∂†-outer-commute = F.‚óÜ-outer-commute
          ; ‚óè·∂†-outer-commute = F.‚óè-outer-commute
          ; ‚óÜ-outer-commute = F.‚óÜ-outer-commute
          }
        ; outer-commute = F.outer-commute
        }
      }
    open ReversibleFumulaExtrusion reversibleFumulaExtrusion public
      using (fumulaExtrusion; isFumulaExtrusion; isReversibleFumulaExtrusion)
